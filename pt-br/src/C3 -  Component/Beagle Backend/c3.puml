@startuml c2
!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Component.puml
LAYOUT_WITH_LEGEND()

Container_Boundary(beagle_backend, "Beagle Backend"){

  Boundary(starters,"Starters and Utility"){
    Boundary(backend_starter, "Koltin Starters"){
      Component(backend_starter_spring, "Beagle Spring Starter", "Facilita a configuração inicial de aplicações usando Spring Boot")
      Component(backend_starter_micronaut, "Beagle Micronaut Starter", "Facilita a configuração inicial de aplicações usando Micronaut")
    }

    Component(ts_cli, "CLI","Typescript", "Linha de comando para dar mais produtividade e ajudar na configuração de aplicações usando o Backend Typescript")
  }


  Boundary(backend_typescript, "Backend Typescript", "Typescript"){

    Component(ts_express, "Beagle Express","Typescript", "Uma interface mais amigável para o uso do 'core', ajuda na produtividade e minimiza erros como por exemplo tipagem")
    Component(ts_components, "Components", "Typescript", "Os componentes padrão da biblioteca, este módulo é opcional")


    Boundary(ts_core,"Core", "Typescript"){
      Component(ts_actions, "Actions", "Typescript", "Definição da lógica para adicionar e tratar ações nos componentes")
      Component(ts_operations, "Operations", "Typescript", "Definição da lógica para adicionar e tratar operações nos componentes")
      Component(ts_serializer, "Serializer", "Typescript", "Utilitário que possui a lógica para a conversão de componentes .tsx para JSON.")
      Component(ts_models, "Models", "Typescript", "Definição das interfaces para contexto, ações e operações")
      Component(ts_context, "Context", "Typescript", "Definição das interfaces para tratar e criar contextos Beagle")
    }

    Rel(ts_components, ts_core, "Usa")
    Rel(ts_express, ts_core, "Usa")
    Rel(ts_actions, ts_models, "Possui")
    Rel(ts_operations, ts_models, "Possui")
    Rel(ts_cli, backend_typescript, "Ajuda Configurar")

  }

  Boundary(kotlin, "Backend Kotlin"){
    Component(cache, "Cache","Kotlin", "Contém a lógica que otimiza o reúso de JSON já enviados ao frontend")
    Component(component_sorting, "Canalização de Componentes", "Kotlin", "Utilitário que ajuda a filtrar quais componentes serão mostrados por plataforma")
    Component(widget, "Widget","Kotlin", "Define o modelo base para criação de componentes")
    Component(beagle_components, "Componentes Beagle UI","Kotlin", "Define o modelo para criação de cada componente de UI do Beagle como Text, Button e etc...")
    Component(analytics, "Analytics","Kotlin", "Define o modelo para criação do serviço de analytics")
    Component(operations, "Operações","Kotlin", "Define o modelo para adicionar operações aos componentes")
    Component(actions, "Ações","Kotlin", "Define o modelo para adicionar ações aos componentes")
    Component(serialization, "Serialização", "Kotlin","Utilitário para serializar os componentes criados")
    Component(context, "Contexto", "Kotlin","Define o modelo para criação de contextos Beagle nos componentes")
    Component(layout_style, "Layout e Estilos", "Kotlin","Define o modelo para aplicar mudanças de layout como posicionamento e estilo como cores e tamanho")
  }

}

Rel(backend_starter,kotlin, "Ajuda configurar")
Rel(serialization, beagle_components, "Serializa")
Rel(serialization, component_sorting, "Pode Usar")
Rel(component_sorting, cache, "Pode Usar")
Rel(beagle_components,widget, "Herda")
Rel(beagle_components,analytics, "Herda")
Rel(beagle_components,operations, "Herda")
Rel(beagle_components,actions, "Herda")
Rel(beagle_components,context, "Herda")
Rel(beagle_components,layout_style, "Herda")


@enduml
