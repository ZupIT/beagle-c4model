@startuml c2
!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Component.puml
LAYOUT_WITH_LEGEND()

System_Ext(frontend_app, "Android Application", "An application that render screens/components created with Beagle")
System_Ext(moshi_lib, "Moshi library","A JSON library for Android and Java that converts JSON objects into Java objects")
System_Ext(yoga_layout, "Yoga Layout", "Engine that positions ui components on a screen")
System_Ext(design_system, "Design System (External)", "An external Design System library ")
System_Ext(analytics_provider, "Analytics Provider", "An external Analytics tool provider")

Container(beagle_backend, "Beagle Backend", "Kotlin", "Defines an enviroment to create Beagle Screens/Components following it's contract")

Container_Boundary(beagle_android, "Beagle Android"){
  Component(beagle_config, "Beagle Config", "Kotlin", "Defines some Beagle Configurations, like the BASE URL used for backend requisitions. It is also used when creating the Beagle Setup")
  Component(beagle_networking, "Beagle Networking", "Kotlin","Configures the application netwrok layer")
  Component(beagle_setup, "Beagle Setup", "Kotlin", "Maps the components registration created by Beagle. It is set through an annotation processor. It is created on the application first build.") 
  Component(beagle_activity, "Beagle Activity", "Kotlin","Receives serialized server driven screens/components")
  Component(beagle_serializer, "Beagle Serializer", "Kotlin", "Serializes/Deserializes screens/components through MOSHI")
  Component(server_driven_component, "Server Driven Component", "Kotlin","Beagle component ready to be turned into an Android native view")
  Component(view_factory, "Beagle View Factory", "Kotlin", "Class whoose logic is responsible to create Android native views")
  Component(beagle_fragment, "Beagle Fragment", "Kotlin", "Android fragment created from a deserialized screen/component JAVA object")
  Component(context_data_manager, "Context Data Manager", "Kotlin", "Defines de logic to add and handle the Context functionality in Beagle screen/components. Updates the Global context")
  Component(beagle_analytic, "Beagle Analytics", "Kotlin", "Maps the Analytics provider")
  Component(beagle_ds, "Design System", "Kotlin", "Maps the Android styles so Beagle could apply them on screen/components")
}

Rel(frontend_app, beagle_config, "Defines")
BiRel(beagle_analytic, analytics_provider, "Register events")
BiRel(beagle_fragment, beagle_ds, "Add styles")
BiRel(beagle_ds, design_system, "Can get styles from an external library")
BiRel(beagle_fragment, beagle_analytic, "Adds Analytics provider")
BiRel(beagle_fragment, context_data_manager, "Adds/Handles context")
Rel(beagle_serializer, beagle_fragment, "Converts in")
Rel(frontend_app, beagle_activity, "Adds a server driven screen on Android application")
Rel(beagle_activity, beagle_networking, "Uses", "Fetches")
Rel(beagle_networking, beagle_backend, "Makes screen/components requisitions to the backend","HTTPS/JSON")
Rel(beagle_serializer, moshi_lib, "Uses")
Rel(beagle_activity, beagle_serializer, "Uses")
Rel(beagle_fragment, server_driven_component, "Creates")
Rel(server_driven_component, view_factory, "Uses")
Rel(view_factory, beagle_activity, "Creantes an Android view")
Rel(server_driven_component, beagle_setup, "Is registered")
BiRel(server_driven_component, yoga_layout, "Defines ui components positioning at a screen")

@enduml
