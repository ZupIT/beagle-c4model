@startuml c2
!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Component.puml
LAYOUT_WITH_LEGEND()

Container_Boundary(beagle_backend, "Beagle Backend"){

  Boundary(starters,"Starters and Utility"){
    Boundary(backend_starter, "Koltin Starters"){
      Component(backend_starter_spring, "Beagle Spring Starter", "It triggers initial automatic configurations for applications using Spring")
      Component(backend_starter_micronaut, "Beagle Micronaut Starter", "It triggers initial automatic configurations for applications using Micronaut")
    }

    Component(ts_cli, "CLI","Typescript", "Command line tool to increase productivity and facilitate the creation of TS Backends")
  }


  Boundary(backend_typescript, "Backend Typescript", "Typescript"){

    Component(ts_express, "Beagle Express","Typescript", "A more user-friendly interface of the core lib, it brings a lot of benefits that makes the lib easier to use and safer (better typing).")
    Component(ts_components, "Components", "Typescript", "The default components of the Beagle library, this module is optional")


    Boundary(ts_core,"Core", "Typescript"){
      Component(ts_actions, "Actions", "Typescript", "Defines the and logic to add actions to the components")
      Component(ts_operations, "Operations", "Typescript", "Defines the logic to add operations to the components")
      Component(ts_serializer, "Serializer", "Typescript", "Utility to work with the parsing logic of components from .tsx component to JSON")
      Component(ts_models, "Models", "Typescript", "Defines the interfaces for operations, contexts and actions")
      Component(ts_context, "Context", "Typescript", "Defines the interfaces for creating and handling Beagle contexts")
    }

    Rel(ts_components, ts_core, "Uses")
    Rel(ts_express, ts_core, "It uses")
    Rel(ts_actions, ts_models, "It has")
    Rel(ts_operations, ts_models, "It has")
    Rel(ts_cli, backend_typescript, "It helps configure")

  }

  Boundary(kotlin, "Backend Koltin"){

    Component(cache, "Cache", "Kotlin", "It has the logic to optimize the reuse of JSON already sent to the frontend")
    Component(component_sorting, "Component channeling", "Kotlin", "Utility that helps to filter which component will be displayed by the platform")
    Component(widget, "Widget", "Kotlin", "Defines the model to create components")
    Component(beagle_components, "Componentes Beagle UI", "Kotlin", "Defines the model to create each Beagle's UI component like Text, Button, etc...")
    Component(analytics, "Analytics", "Kotlin", "Defines the model to create analytics service")
    Component(operations, "Operations", "Kotlin", "Defines the model to add operations to the components")
    Component(actions, "Actions", "Kotlin", "Defines the model to add action to the components")
    Component(serialization, "Serialization", "Kotlin", "Utility to serialize the created components")
    Component(context, "Context", "Kotlin", "Defines the template to create Beagle's context on the components")
    Component(layout_style, "Layout e Estilos", "Kotlin", "Defines the template to apply layout changes like positioning and style, such as color and size")


    Rel(backend_starter,kotlin, "It helps configure")
    Rel(serialization, beagle_components, "It serialize")
    Rel(serialization, component_sorting, "It can use")
    Rel(component_sorting, cache, "It can use")
    Rel(beagle_components,widget, "It inherits")
    Rel(beagle_components,analytics, "It inherits")
    Rel(beagle_components,operations, "It inherits")
    Rel(beagle_components,actions, "It inherits")
    Rel(beagle_components,context, "It inherits")
    Rel(beagle_components,layout_style, "It inherits")
  }

}



@enduml
