@startuml c2
!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Component.puml

LAYOUT_WITH_LEGEND()
LAYOUT_LEFT_RIGHT()

System_Ext(frontend_app, "iOS Application", "An app that renders Beagle screens")
Container(beagle_backend, "Beagle Backend", "Koltin", "Permite a criação de telas seguindo o contrato do Beagle")

Container_Boundary(beagle_android, "Beagle iOS") {
  Component(beagle_config, "Beagle Config", "Swift", "Singleton responsible for storing all Beagle dependencies and configurations, such as: themes, view client implementations, analytics, decoder, logger, deeplinks, etc.")
  Component(beagle_view_controller, "Beagle View Controller", "Swift", "Beagle full screen representation (View Controller)")
  Component(beagle_view, "Beagle View", "Swift", "Alternative to the Beagle View Controller that allows you to add a Beagle screen as part of a native iOS screen (UIView)")
  Component(analytics, "Analytics", "Swift | Abstract | Optional", "Log screen lifecycle events for analytics tools")
  Component(view_client, "View Client", "Swift", "Repository that is responsible to make remote requests to get Beagle screens.")
  Component(view_model, "Beagle View Model", "Swift", "Responsible to intermediate between system IO and component view")
  Component(component_decoder, "Component Decoder", "Swift", "Turns Backend JSON Responses into Beagle Components")
  Component(beagle_component, "Server Driven Component", "Swift", "Data structure representing a Beagle interface element (Container, Button, Text, List, Operation, etc.)")
  Component(cache, "Cache", "Swift | Abstract | Optional", "Temporarily stores screen structures received via server, indexed by URI")
  Component(network_client, "Network Client", "Swift | Abstract", "Component that defines the execution strategy for remote requests. Requires implementation.")
  Component(renderer, "Renderer", "Swift", "Coordinates rendering of interface elements")
  Component(view_configurator, "View Configurator", "Swift", "Applies themes and accessibility to server-driven components")
  Component(beagle_theme, "Theme", "Swift", "Stores component style settings such as colors, borders. Acts as a bridge between native design system and Beagle components")
  Component(style_view_configurator, "Style View Configurator", "Swift", "Knows how to apply styles and flex organization to interface elements")
  Component(layout_manager, "Layout Manager", "Swift", "Coordinates the distribution of interface elements on screens, applies margins and safe area")
}

System_Ext(yoga, "Yoga", "Library that positions screens/components in the flex pattern")

Rel(frontend_app, beagle_config, "Initializes")
Rel(frontend_app, beagle_view_controller, "Initializes")
Rel(frontend_app, beagle_view, "Adds to existing screens")

Rel(beagle_view_controller, renderer, "Uses")
Rel(beagle_view_controller, beagle_component, "Contains one or more")
Rel(beagle_view_controller, layout_manager, "Uses")
Rel(beagle_view_controller, analytics, "Records actions and navigation")
BiRel(beagle_view_controller, view_model, "Requires content | Watches")

Rel(beagle_view, beagle_view_controller, "Used in container")

Rel(layout_manager, style_view_configurator, "Uses")

Rel(style_view_configurator, yoga, "Uses Yoga properties and elements")

Rel(view_client, component_decoder, "Uses")
Rel(view_client, cache, "Stores responses")
Rel(view_client, network_client, "Uses")

Rel(network_client, beagle_backend, "Requires screens", "JSON/Https")

Rel(renderer, beagle_component, "Transforms to native (UIKit)")
Rel(renderer, view_configurator, "Uses")

Rel(view_configurator, beagle_theme, "Applies")
Rel(view_configurator, style_view_configurator, "Uses")

Rel(component_decoder, beagle_component, "Creates and store custom types")

Rel(view_model, view_client, "Uses")
Rel(view_model, analytics, "Propagates events")

@enduml
