@startuml c2
!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Component.puml
LAYOUT_WITH_LEGEND()

System_Ext(frontend_app, "Application / Website", "A software that renders Beagle's screens")

Container(beagle_backend, "Beagle Backend", "Kotlin", "It allows the creation of screens following Beagle's contract")

Container_Boundary(beagle_web, "Beagle Web"){

Boundary(beagle_web_frontend, "Beagle Web Frontend"){
    Component(beagle_remote_view, "Beagle Remote View","Typescript", "Location where the screen is rendered according to the route and/or past settings")
    Component(beagle_components, "Beagle Components","Typescript", "Beagle's components like Text, Listview, Container, etc")

    Boundary(beagle_react, "Beagle React"){
      Component(beagle_provider, "Beagle Provider", "Typescript", "It starts Beagle Service")
    }

    Boundary(beagle_angular, "Beagle Angular"){
      Component(beagle_module, "Beagle Module", "Typescript", "It starts Beagle Service")
    }

    Boundary(beagle_flutter, "Beagle Flutter"){
      Component(beagle_flutter_bridge, "Beagle Flutter Bridge", "Typescript, Dart", "Communication bridge between Beagle Core and native Flutter code")
    }
  }

  Boundary(beagle_flutter_core, "Beagle Flutter Core"){
      Component(root_navigator, "Root Navigator", "Dart", "Flutter implementation for the navigator, it is similar to the Default Web Navigator")
  }

  Boundary(beagle_core, "Beagle Web Core"){
    Component(beagle_service, "Beagle Service", "Typescript", "The starting point of all Beagle Core processes. It is responsible for starting the library and it reduces the gap between utilities and native code")
    Component(beagle_config, "Beagle Config", "Typescript","Settings that change or enhance Beagle's library behavior")
    Component(beagle_view, "Beagle View","Typescript", "It is responsible for managing server-driven screens")
    Component(default_web_controller, "Default Web Controller", "Typescript", "Handles events of Loading, Error and Success when navigation happens")
    Component(beagle_actions, "Beagle Actions","Typescript", "Pre-defined or customized actions, for example, SendRequest")
    Component(renderer, "Renderer","Typescript", "It is responsible for rendering the screens and uses the desserialization utilities")

  Boundary(beagle_config_services, "Config Services and Helpers"){
      Component(http_client, "HTTP Client","Typescript", "Service to define custom fetch action")
      Component(analytics, "Analytics Service","Typescript", "Service to enable analytics for route changing events or components action")
      Component(view_client, "View Client","Typescript", "Utility that makes requests to the backend and handles cache strategies")
      Component(view_content_manager, "View Content Manager","Typescript", "Utility that helps access elements of the component tree")
      Component(default_web_navigator, "Default Web Navigator","Typescript", "Responsible for the changing of the routes and for calling the respective services to deal with the parsing and presentation.")
      Component(global_context, "Global Context","Typescript", "Utility responsible for deserialization and treatment of the global context")
      Component(url_builder, "URL Builder","Typescript", "Utility that treats the URL sent as a parameter for the settings")
      Component(operation_handlers, "Operation Handler","Typescript", "Utility responsible for deserializing and handling operations")
      Component(action_handlers, "Action Handler","Typescript", "Utility responsible for deserialization and handling actions")
      Component(expression_handlers, "Expression Handler","Typescript", "Utility responsible for deserialization and handling expressions")
    }
  }
}

Rel(frontend_app, beagle_angular, "It uses")
Rel(frontend_app, beagle_react, "It uses")
Rel(frontend_app, beagle_flutter, "It uses")
Rel(beagle_flutter, root_navigator,"It uses")
Rel(beagle_flutter_bridge, beagle_service, "It creates")
Rel(beagle_provider, beagle_remote_view, "Access parameters")
Rel(beagle_module, beagle_remote_view, "Access parameters")
Rel(beagle_remote_view, beagle_components, "Process and present")
Rel(beagle_actions, analytics, "It can create events")
Rel(beagle_provider, beagle_service, "It creates")
Rel(beagle_module, beagle_service, "It creates")
Rel(beagle_service, beagle_config ,"It processes")
Rel(beagle_config, beagle_config_services ,"It contains")
Rel(beagle_config, beagle_components ,"It contains")
Rel(beagle_remote_view, default_web_controller ,"It creates")
Rel(beagle_remote_view, view_content_manager ,"It provides for its children")
Rel(view_content_manager, beagle_view , "It returns an instance")
Rel(beagle_config, beagle_actions ,"It contains")
Rel(default_web_navigator, view_client, "It uses")
Rel(beagle_view, global_context, "It creates")
Rel(http_client, beagle_backend, "Makes a request", "HTTP")
Rel(default_web_navigator, default_web_controller, "It uses")
Rel(beagle_actions, http_client, "It can use")
Rel(view_client, http_client, "It uses")
Rel(default_web_navigator, beagle_view, "It creates")
Rel(beagle_view, default_web_navigator, "It accesses it")
Rel(beagle_service, beagle_config_services, "It creates")
Rel(beagle_view, renderer, "It creates")
Rel_L(renderer, expression_handlers, "It uses")
Rel_L(renderer, operation_handlers, "It uses")
Rel_L(renderer, action_handlers, "It uses")
Rel(view_client, url_builder, "It uses")
Rel(default_web_controller, renderer, "Accesses it and triggers rendering")
Rel(default_web_navigator, analytics, "It can create events")

@enduml
