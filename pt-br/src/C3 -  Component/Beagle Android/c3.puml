@startuml c2
!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Component.puml
LAYOUT_WITH_LEGEND()

System_Ext(frontend_app, "Aplicativo Android", "Um aplicativo que renderiza as telas do Beagle")
System_Ext(moshi_lib, "Moshi library","JSON lib para Android e Java que converte JSON em um objeto Java")
System_Ext(yoga_layout, "Yoga Layout", "Engine que posiciona os componentes em tela")
System_Ext(design_system, "Design System Externo", "Lib de configuração de Design System externo a aplicação")
System_Ext(analytics_provider, "Analytics Provider", "Provedor de Analytics externo")

Container(beagle_backend, "Beagle Backend", "Kotlin", "Permite a criação de telas seguindo o contrato do Beagle")

Container_Boundary(beagle_android, "Beagle Android"){
  Component(beagle_config, "Beagle Config", "Kotlin", "Define configurações do Beagle, como a URL base para requisições ao Backend. É utilizado na criação do Beagle Setup")
  Component(beagle_networking, "Beagle Networking", "Kotlin","Configura a camada de rede do aplicativo")
  Component(beagle_setup, "Beagle Setup", "Kotlin","Registra os componentes utilizados/criados no Beagle por meio de um processador de anotações. E criado quando a aplicação é montada (build) a primeira vez.")
  Component(beagle_activity, "Beagle Activity", "Kotlin","Recebe Telas/componentes server driven serializados")
  Component(beagle_serializer, "Beagle Serializer", "Kotlin", "Serializa/Deserializa tela/componentes utilizando MOSHI")
  Component(server_driven_component, "Server Driven Component", "Kotlin","Componente do Beagle pronto para ser transformado em uma view nativa do Android")
  Component(view_factory, "Beagle View Factory", "Kotlin", "Classe responsável por criar views nativas no Android")
  Component(beagle_fragment, "Beagle Fragment", "Kotlin", "Fragment do Android criado a partir da tela/componentes deserializados")
  Component(context_data_manager, "Context Data Manager", "Kotlin", "Regula a adição e atualização da funcionalidade do contexto aos componentes. Atualiza o contexto Global")
  Component(beagle_analytic, "Beagle Analytics", "Kotlin", "Classe que mapeia Analytics")
  Component(beagle_ds, "Design System", "Kotlin", "Classe que mapeia os estilos do Android para que sejam usados pelos componentes do Beagle")
}

Rel(frontend_app, beagle_config, "Define")
BiRel(beagle_analytic, analytics_provider, "Registra eventos")
BiRel(beagle_fragment, beagle_ds, "Adiciona estilos")
BiRel(beagle_ds, design_system, "Pode receber estilos de library externa")
BiRel(beagle_fragment, beagle_analytic, "Adiciona Analytics")
BiRel(beagle_fragment, context_data_manager, "Adiciona Contexto")
Rel(beagle_serializer, beagle_fragment, "Converte em")
Rel(frontend_app, beagle_activity, "Adiciona a tela Server Driven a Aplicação")
Rel(beagle_activity, beagle_networking, "Usa", "Fetch")
Rel(beagle_networking, beagle_backend, "Faz requisição da tela/componente Beagle","HTTPS/JSON")
Rel(beagle_serializer, moshi_lib, "Usa")
Rel(beagle_activity, beagle_serializer, "Usa")
Rel(beagle_fragment, server_driven_component, "Cria")
Rel(server_driven_component, view_factory, "Usa")
Rel(view_factory, beagle_activity, "Cria Android view")
Rel(server_driven_component, beagle_setup, "É registrado")
BiRel(server_driven_component, yoga_layout, "Define posicionamento na tela")

@enduml
